# -*- mode: org; org-export-babel-evaluate: nil -*-
#+TITLE: Emoji and Group Identity on Twitter
#+Author: Carl Colglazier, Zackary Allen
#+LaTeX_CLASS: acmart
#+LATEX_CLASS_OPTIONS: [format=manuscript, review=false, screen=true, authorversion=true, nonacm=true, authordraft=false]
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+LATEX_HEADER: \usepackage[T1]{fontenc}
# #+LATEX_HEADER: \newunicodechar{✨}{\text{\raisebox{-0.2em}{\includegraphics[height=1em]{emoji/2728.pdf}}}}
#+LATEX_HEADER: \DeclareUnicodeCharacter{2728}{\text{\raisebox{-0.2em}{\includegraphics[height=1em]{emoji/2728.pdf}}}}
#+LATEX_HEADER: \DeclareUnicodeCharacter{1F1FA}{\text{\raisebox{-0.2em}{\includegraphics[height=1em]{emoji/1F1FA-1F1F8.pdf}}}}
#+LATEX_HEADER: \DeclareUnicodeCharacter{1F451}{\text{\raisebox{-0.2em}{\includegraphics[height=1em]{emoji/1F451.pdf}}}}
#+LATEX_HEADER: \DeclareUnicodeCharacter{274C}{\text{\raisebox{-0.2em}{\includegraphics[height=1em]{emoji/274C.pdf}}}}
#+LATEX_HEADER: \DeclareUnicodeCharacter{1F339}{\text{\raisebox{-0.2em}{\includegraphics[height=1em]{emoji/1F339.pdf}}}}
#+LATEX_HEADER: \DeclareUnicodeCharacter{1F30A}{\text{\raisebox{-0.2em}{\includegraphics[height=1em]{emoji/1F30A.pdf}}}}
#+LATEX_HEADER: \DeclareUnicodeCharacter{2764}{\text{\raisebox{-0.2em}{\includegraphics[height=1em]{emoji/2764.pdf}}}}
#+LATEX_HEADER: \DeclareUnicodeCharacter{1F33B}{\text{\raisebox{-0.2em}{\includegraphics[height=1em]{emoji/1F33B.pdf}}}}
#+LATEX_HEADER: \DeclareUnicodeCharacter{1F384}{\text{\raisebox{-0.2em}{\includegraphics[height=1em]{emoji/1F384.pdf}}}}
#+LATEX_HEADER: \DeclareUnicodeCharacter{1F49C}{\text{\raisebox{-0.2em}{\includegraphics[height=1em]{emoji/1F49C.pdf}}}}
#+LATEX_HEADER: \DeclareUnicodeCharacter{2744}{\text{\raisebox{-0.2em}{\includegraphics[height=1em]{emoji/2744.pdf}}}}
#+LATEX_HEADER: \DeclareUnicodeCharacter{2B50}{\text{\raisebox{-0.2em}{\includegraphics[height=1em]{emoji/2B50.pdf}}}}
#+options: toc:nil
#+PROPERTY: header-args :eval never-export
#+LaTeX_HEADER: \usepackage{hyperref}
# #+latex_header: \usepackage{coloremoji}
# #+LaTeX_HEADER: \usepackage[margin=1in]{geometry}
#+LaTeX_HEADER: \usepackage[backend=bibtex,sorting=none]{biblatex}
#+LaTeX_HEADER: \addbibresource{main.bib}  %% point at your bib file
#+PANDOC_OPTIONS: bibliography:main.bib

#+LaTeX: \begin{abstract}
We propose a measure for group identity on Twitter using emoji
displayed by users in their names or biographies. Viewing the use of
emoji as social phenomenon, we introduce methods for measuring how
often emoji users follow/friend other emoji users compared to
non-emoji users. Furthermore, we introduce methods to measure how much
users will friend/follow users with similar emojis, finally concluding
with visual analysis of what ties between certain emoji look like.
#+LaTeX: \end{abstract}

* Background

#+BEGIN_COMMENT
Many users use emojis, in large part because the limit for a display
name is 50 characters, and the limit for a bio is 160 characters.
#+END_COMMENT

Many Twitter users engage with the platform to present a formed
identity to an imagined audience \cite{marwick2011tweet}. This
activity often flattens identity as individuals try to fit in to
larger groups \cite{boyd2008taken}.

At the same time, Twitter by design limits the extent of metadata
associated with each profile. Twitter has long used "hovercards" which
show a small set of information about a profile in the
timeline \cite{twitterhover}. Thus when someone encounters an
unfamiliar profile, they can quickly view that user’s display name,
handle, short biography, profile picture, cover photo, and a count of
the number of followers and accounts followed. By elevating these
short pieces of metadata, Twitter creates an incentive for users to
succinctly spotlight pieces of their identity to potential audience
members through these attributes.

The main feature of Twitter is the ability to post and view
Tweets---short messages limited to 280 characters. Tweets
are typically intended for the followers of the poster, though they
often get spread beyond just the user’s followers, thus encouraging a
social community. Tweets can spread in a variety of ways: they can be
retweeted directly, quote retweeted, or shown in another user’s feed
when someone they follow likes the post. Each of these methods let a
user see another user’s Tweet; this is applicable even if the former
does not follow the latter. Thus Twitter users may be exposed to
people outside of their immediate social circles and make judgements
about these accounts on the basis of presented metadata rather than
social association.

Symbols often represent groups and can be political in
nature. Following Benedict Anderson’s concept of "imagined
communities" to describe the concept of
nationalism \cite{anderson2006imagined}, for instance, we can think of
national symbols such as flags or seals as materialized
representations of group identity. Indeed, national flags make up a
good part of the set of standardized emoji \cite{unicodeemoji}. These
symbols–even within the context of an international, standardized
system like emoji–can prove controversial. The Information and
Communication Ministry of Indonesia, for instance, sought to remove
emoji depicting same-sex couples in
\cite{boellstorff2016against}. The standardization of emoji has
also raised concerns over the extent of their representation and
diversity.

Twitter has supported emoji on their platform since 2014. In fact,
Twitter even developed an open-source emoji library. Beyond the
company itself, Twitter users have also embraced emoji characters and
use them frequently. Emojitracker, a service which logs how Twitter
accounts use emoji, has logged over a two billion instances of the
most popular emoji on the list, the “Face with Tears of Joy”
emoji \cite{emojitracker}. This emoji was declared the 2015 word of the
year by Oxford Dictionaries.

Based on the hypothesis that many Twitter users include emoji in their
profile metadata as a signal for group identity, we predict that users
with certain emojis in their name or biography will connect at a
higher rate with users that have similar emojis. We further expect
some emoji to be associated with this behavior more than others. For
instance, the rose emoji, which is used by members of the democratic
socialist movement, would more likely show homophilic behavior
compared to more generic emoji such as the red heart emoji.

Understanding the social intricacies of emoji use on Twitter can be
valuable for marketing and public reputation. For organizations that
use Twitter, emojis can be used to make their organization seem like
the everyman. If done correctly, those that use these symbols
correctly can pull on the sense of identity that it brings to blend
into the group. By taking advantage of the way emojis can create a
sense of belonging, organizations could use information such as we are
researching to strengthen their social media appearance.


* Method

From the Twitter API, we have amassed a significant number of Twitter
user-ids. With these ids, we have created two datasets: a control
dataset of users without emojis in their screen names or biographies
and a sample dataset of users with emojis in their screen names or
biographies. From there, we have created a third dataset of secondary
user information on their connections.

Once our dataset was created, we carried out analysis on our
hypothesis with both statistical and graph models. From our
statistical models we found that users with emojis tend to connect
with more users than users without emojis (R1). We found this by
measuring the followers count, friends count, and listed count columns
for each user in our first two datasets.  For the secondary user side,
we found users form cliques with similar emoji users, which can be
measured by counting emojis per secondary user and sorting by the
total most popular emojis over the third dataset (R2). Unsurprisingly,
this applies to both followers and friends of the primary user from
the first two datasets.

With our graph, the nodes are emojis and the edges are weighted by the
number of connections between emoji. From our graph model we found
that visually identifying strong ties between certain emojis is
trivial (R3). It furthermore presents a validation method for the
theory based on analysis of the homogeneity of Twitter networks.

** Research Questions


+ R1: Do users with emojis make more connections?
+ R2: Do users tend to follow/friend more users with similar emoji?
+ R3: What does the overall emoji network look like?

** Challenges
+ How can we scrape useful amounts of data using only a free Twitter API key?
+ How can we simultaneously draw conclusions about users and emojis?
+ How can we graph a network of secondary users and their emojis?
* Results
** Sample Analysis
#+BEGIN_SRC python :dir ./scripts :session :exports none :results silent
import numpy as np
import pandas as pd
from scipy import stats
from scrape_emoji import emoji_list
from itertools import chain
import math
import statsmodels
import statsmodels.api as sm
from statsmodels.formula.api import ols
from collections import Counter
from matplotlib import pyplot as plt
import numpy as np
import seaborn as sns
users = pd.read_csv("../data/users.csv", engine='c', lineterminator='\n')
original_sample = pd.read_csv("../data/sample.csv")
original_control = pd.read_csv("../data/control.csv")
updated = pd.read_csv("../data/updatedsamplecontrol.csv", lineterminator='\n')
meta = pd.read_csv("../data/meta.csv", lineterminator='\n')
meta["nemoji"] = meta["nemoji"].map(eval)
def get_emoji(text):
    s = set()
    t = text
    for e in em:
        if e in t:
            s.add(e)
            t = t.replace(e, '')
        if len(t) == 0:
            break
    return s

em = list(emoji_list())
em.sort(key=len, reverse=True)
updated["name_emoji"] = [get_emoji(str(x)) for x in updated["name"]]
sample = updated[(updated["name_emoji"].str.len() > 0) & (updated.index.isin(original_sample.index))]
sample = sample.sample(1000, random_state=31415926)
control = updated[(updated["name_emoji"].str.len() == 0) & (updated.index.isin(original_control.index))]
control = control.sample(1000, random_state=31415926)
#+END_SRC

Before any analysis, we must first determine if parametric statistics
apply. We can test for the normalcy of the distribution using
D’Agostino and Pearson’s test for departure from normalcy.

#+BEGIN_SRC python :session :exports results :results values table
  t = {"sample": sample, "control": control}
  counts = ["listed_count", "followers_count", "friends_count"]
  results = []
  for key in t.keys():
    for count in counts:
      statistic, p = stats.normaltest(t[key][count])
      print(p)
      results.append({
        "Group": "{} {}".format(key, count),
        "statistic": statistic,
        "p-value": '%.2E' % p
      })
  
  series = pd.DataFrame(results)
  [list(series)] + [None] + series.round(4).values.tolist()
#+END_SRC

#+NAME: normaltest
#+CAPTION: D’Agostino and Pearson’s test on variables.
#+RESULTS:
| Group                   |   p-value | statistic |
|-------------------------+-----------+-----------|
| sample listed_count     | 3.66E-295 | 1355.9307 |
| sample followers_count  | 1.31E-291 | 1339.5606 |
| sample friends_count    |  0.00E+00 | 1483.7946 |
| control listed_count    |  0.00E+00 | 2114.8148 |
| control followers_count |  0.00E+00 | 1779.9979 |
| control friends_count   | 1.10E-248 | 1141.8983 |

As Table [[normaltest]] shows, the null hypothesis that each sample comes from a
normal distribution can be rejected. The Mann-Whitney rank test is
used instead to test the null hypothesis that it is equally likely
that a randomly selected value from one sample will be less than or
greater than a randomly selected value from a second sample.

#+BEGIN_SRC python :session :exports results :results values table
  t = {"sample": sample, "control": control}
  counts = ["listed_count", "followers_count", "friends_count"]
  results = []
  for count in counts:
    statistic, p = stats.mannwhitneyu(control[count], sample[count])
    print(p)
    results.append({
      "Variable": count,
      "statistic": statistic,
      "p-value": '%.2E' % p
    })
  
  series = pd.DataFrame(results)
  [list(series)] + [None] + series.round(4).values.tolist()
#+END_SRC

#+NAME: tbl:mann
#+CAPTION: Mann-Whitney rank tests.
#+RESULTS:
| Variable        |  p-value | statistic |
|-----------------+----------+-----------|
| listed_count    | 4.23E-02 |  478001.5 |
| followers_count | 5.39E-23 |  373393.5 |
| friends_count   | 7.99E-16 |  397093.0 |

Table [[tbl:mann]] suggests a statistically significant different in the
distributions between the sample and control groups for the number of
lists in which users appear, the number of accounts users follow, and
the number of followers for each user.

#+BEGIN_SRC python :session :var f="vios.pdf" :results file graphics :exports results
plt.clf()
all_sampled["listed_count_rank"] = all_sampled["listed_count"].rank()
all_sampled["followers_count_rank"] = all_sampled["followers_count"].rank()
all_sampled["friends_count_rank"] = all_sampled["friends_count"].rank()
objs = ["listed_count_rank", "followers_count_rank", "friends_count_rank"]
fig, axes = plt.subplots(3, 1, figsize=(6, 8), sharex=True)
sns.violinplot(y="listed_count_rank", x="sample", data=all_sampled, ax=axes[0])
sns.violinplot(y="followers_count_rank", x="sample", data=all_sampled, ax=axes[1])
sns.violinplot(y="friends_count_rank", x="sample", data=all_sampled, ax=axes[2])
plt.savefig("../images/%s" % f)
"images/%s" % f
#+END_SRC

#+NAME: fig:vios
#+CAPTION: Violin plot.
#+RESULTS:
[[file:images/vios.pdf]]

Figure [[fig:vios]] shows the distribution of the ranks for the variables.

*** Old data. Not for export.                                      :noexport:

#+BEGIN_SRC python :session :var f="cum_listed.pdf" :results file graphics :exports none :eval no
plt.style.use('ggplot')
plt.clf()
bins = np.linspace(0, 250, 25)
plt.hist([control["listed_count"], sample["listed_count"]], bins, label=['control', 'sample'], cumulative=True)
plt.legend(loc='upper right')
plt.yscale('log', nonposy='clip')
plt.savefig("../images/%s" % f)
"images/%s" % f
#+END_SRC

#+ATTR_LATEX: :float multicolumn
#+RESULTS:
[[file:images/cum_listed.pdf]]

#+BEGIN_SRC python :session :var f="vio_listed.pdf" :results file graphics :exports none :eval no
sample["sample"] = True
control["sample"] = False
all_sampled = sample.append(control)
plt.clf()
ax = sns.violinplot(y="listed_count", x="sample", data=all_sampled)
plt.yscale('log', nonposy='clip')
plt.savefig("../images/%s" % f)
"images/%s" % f
#+END_SRC

#+ATTR_LATEX: :float multicolumn
#+RESULTS:
[[file:images/vio_listed.pdf]]

#+BEGIN_SRC python :session :exports none :results values table :eval no
statistic, pvalue = stats.mannwhitneyu(control["followers_count"], sample["followers_count"])
series = pd.DataFrame({"Statistic": [statistic], "p-value": [pvalue]})
[list(series)] + [None] + series.round(4).values.tolist()
#+END_SRC

#+CAPTION: Mann-Whitney rank test for the "followers count" variable.
#+RESULTS:
| Statistic | p-value |
|-----------+---------|
|  373393.5 |     0.0 |

#+BEGIN_SRC python :session :var f="cum_followers.pdf" :results file graphics :exports none :eval no
plt.style.use('ggplot')
plt.clf()
bins = np.linspace(0, 50_000, 25)
plt.hist([control["followers_count"], sample["followers_count"]], bins, label=['control', 'sample'], cumulative=True)
plt.legend(loc='upper left')
plt.yscale('log', nonposy='clip')
plt.savefig("../images/%s" % f)
"images/%s" % f
#+END_SRC

#+ATTR_LATEX: :float multicolumn
#+RESULTS:
[[file:images/cum_followers.pdf]]

#+BEGIN_SRC python :session :var f="vio_followers.pdf" :results file graphics :exports none :eval no
plt.clf()
ax = sns.violinplot(y="followers_count", x="sample", data=all_sampled)
plt.yscale('log', nonposy='clip')
plt.savefig("../images/%s" % f)
"images/%s" % f
#+END_SRC

#+ATTR_LATEX: :float multicolumn
#+RESULTS:
[[file:images/vio_followers.pdf]]

#+BEGIN_SRC python :session :exports none :results values table :eval no
statistic, pvalue = stats.mannwhitneyu(control["friends_count"], sample["friends_count"])
series = pd.DataFrame({"Statistic": [statistic], "p-value": [pvalue]})
[list(series)] + [None] + series.round(4).values.tolist()
#+END_SRC

#+CAPTION: Mann-Whitney rank test for the "friends count" (following) variable.
#+RESULTS:
| Statistic | p-value |
|-----------+---------|
|  397093.0 |     0.0 |


#+BEGIN_SRC python :session :var f="cum_friends.pdf" :results file graphics :exports none :eval no
plt.style.use('ggplot')
plt.clf()
bins = np.linspace(0, 50_000, 25)
plt.hist([control["friends_count"], sample["friends_count"]], bins, label=['control', 'sample'], cumulative=True)
plt.legend(loc='upper left')
plt.yscale('log', nonposy='clip')
plt.savefig("../images/%s" % f)
"images/%s" % f
#+END_SRC

#+ATTR_LATEX: :float multicolumn
#+RESULTS:
[[file:images/cum_friends.pdf]]

#+BEGIN_SRC python :session :var f="vio_friends.pdf" :results file graphics :exports none :eval no
plt.clf()
ax = sns.violinplot(y="friends_count", x="sample", data=all_sampled)
plt.yscale('log', nonposy='clip')
plt.savefig("../images/%s" % f)
"images/%s" % f
#+END_SRC

#+ATTR_LATEX: :float multicolumn
#+RESULTS:
[[file:images/vio_friends.pdf]]

** Network Analysis
#+BEGIN_SRC python :session :exports results :results output table
sample_follower_ids = set(chain.from_iterable([x.split(',') for x in list(sample.merge(original_sample, on="id", how='left')["followers"]) if type(x) == str]))
control_follower_ids = set(chain.from_iterable([x.split(',') for x in list(control.merge(original_control, on="id", how='left')["followers"]) if type(x) == str]))
meta["sample_follower"] = meta["id"].isin(sample_follower_ids)
meta["control_follower"] = meta["id"].isin(control_follower_ids)
c = Counter()
csample = Counter()
ccontrol = Counter()
for item in meta["nemoji"]:
    for e in item:
        c[e] += 1

for item in meta[meta["sample_follower"]]["nemoji"]:
    for e in item:
        csample[e] += 1

for item in meta[meta["control_follower"]]["nemoji"]:
    for e in item:
        ccontrol[e] += 1

most_common = [x[0] for x in c.most_common(10)]
print([["Emoji", "Total Count", "Sample Followers", "Control Followers"]] + [None] + [[x, c.get(x), csample.get(x), ccontrol.get(x)] for x in most_common])
#+END_SRC

#+RESULTS:
| Emoji | Total Count | Sample Followers | Control Followers |
|-------+-------------+------------------+-------------------|
| ✨    |       26895 |             7743 |              2210 |
| 🇺🇸    |       24072 |            15350 |              8901 |
| 👑    |       12985 |             3824 |              1163 |
| ❌    |       11830 |             8596 |              4874 |
| 🌹    |       11396 |             3897 |              1529 |
| 🌊    |       10740 |             6892 |              4896 |
| ❤️     |        9584 |             3444 |              1422 |
| 🌻    |        7643 |             2250 |               845 |
| 🎄    |        7417 |             1955 |               923 |
| 💜    |        7371 |             2189 |               484 |

#+BEGIN_SRC python :session :exports results :results output table
sample_following_ids = set(chain.from_iterable([x.split(',') for x in list(sample.merge(original_sample, on="id", how='left')["following"]) if type(x) == str]))
control_following_ids = set(chain.from_iterable([x.split(',') for x in list(control.merge(original_control, on="id", how='left')["following"]) if type(x) == str]))
meta["sample_following"] = meta["id"].isin(sample_following_ids)
meta["control_following"] = meta["id"].isin(control_following_ids)
c = Counter()
csample = Counter()
ccontrol = Counter()
for item in meta["nemoji"]:
    for e in item:
        c[e] += 1

for item in meta[meta["sample_following"]]["nemoji"]:
    for e in item:
        csample[e] += 1

for item in meta[meta["control_following"]]["nemoji"]:
    for e in item:
        ccontrol[e] += 1

most_common = [x[0] for x in c.most_common(10)]
print([["Emoji", "Total Count", "Sample Following", "Control Following"]] + [None] + [[x, c.get(x), csample.get(x), ccontrol.get(x)] for x in most_common])
#+END_SRC

#+RESULTS:
| Emoji | Total Count | Sample Following | Control Following |
|-------+-------------+------------------+-------------------|
| ✨    |       26895 |             7153 |              2386 |
| 🇺🇸    |       24072 |            15776 |              8883 |
| 👑    |       12985 |             3199 |              1126 |
| ❌    |       11830 |             8660 |              4784 |
| 🌹    |       11396 |             3329 |              1582 |
| 🌊    |       10740 |             6791 |              4876 |
| ❤️     |        9584 |             2882 |              1268 |
| 🌻    |        7643 |             2075 |               892 |
| 🎄    |        7417 |             2314 |              1191 |
| 💜    |        7371 |             1809 |               494 |

#+BEGIN_SRC python :session :exports results :results values table
emoji_df = pd.DataFrame(0, index=emoji_list(), columns=emoji_list())
s = sample.merge(original_sample, on="id")
for t, user in s[s.index < 100].iterrows():
    if type(user["followers"]) != str:
        continue
    followers = [int(x) for x in user["followers"].split(",")]
    count = Counter()
    for emoji in meta[meta["id"].isin(followers)]["nemoji"]:
        for e in emoji:
            count[e] += 1
    for e in user["name_emoji"]:
       for em, value in count.most_common():
            print(e, em, value)
            emoji_df[e][em] += value

emoji_df.sum().sum()
#+END_SRC

#+RESULTS:
| 4 |

#+BEGIN_SRC python :session :results values :exports results
edf = emoji_df.loc[emoji_df.sum() > 0, emoji_df.sum(axis=1) > 0]
top = edf.sum(axis=1).sort_values(ascending=False).index[0:10]
t = edf[edf.index.isin(top)][top].sort_index().sort_index(axis=1)
t.columns.name = 'foo'
vals = t.astype(str).values.tolist()
for i in range(10):
    vals[i].insert(0, t.index[i])

_ = [[""] + list(t)] + [None] + vals
#+END_SRC

#+RESULTS:
|    |  ✨ |   ❄️ |   ❌ | ❤️ |  ⭐ |   🇺🇸 |  🌊 | 🌹 | 👑 | 💜 |
|----+-----+-----+------+---+-----+------+-----+----+----+----|
| ✨ | 274 |  35 |   14 | 0 |   4 |   39 |   9 |  7 |  3 | 30 |
| ❄️  |  18 |  96 |    4 | 0 |   0 |    4 |  94 |  2 |  3 |  4 |
| ❌ |   3 |   1 |  969 | 0 | 331 | 2678 |   1 |  1 |  1 |  0 |
| ❤️  |  95 |  31 |  101 | 0 |  44 |  281 |  29 |  9 |  9 | 14 |
| ⭐ |   7 |   4 |  494 | 0 | 256 | 1377 |   3 |  0 |  3 |  4 |
| 🇺🇸 |   5 | 245 | 1434 | 0 | 531 | 3572 | 246 |  2 | 10 |  2 |
| 🌊 |  14 | 655 |    0 | 0 |   2 |   12 | 665 |  4 | 30 |  0 |
| 🌹 |  32 |  14 |   36 | 0 |  15 |   91 |  15 | 78 |  1 |  4 |
| 👑 | 109 |  12 |   18 | 0 |   1 |   19 |   8 |  2 | 14 |  4 |
| 💜 |  16 |  76 |   16 | 0 |   4 |   33 |  17 |  2 |  2 |  5 |


[[file:images/graph.png]]

* Discussion
Users in our sample with an emoji in their display names follow more
users, have more followers, and are included in more lists.
** Limitations
The small sample size (N = 1000) limits the ability to compare
attributes between users with different kinds of emoji.
** Future Work
We were unable to answer R3 given the sample size. To do so
in the future.
#+BEGIN_EXPORT latex
\bibliographystyle{acm}
\printbibliography
#+END_EXPORT

